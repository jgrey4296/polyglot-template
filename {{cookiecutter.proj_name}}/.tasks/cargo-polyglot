#!/usr/bin/env bash
# cargo-polyglot -*- mode: sh -*-
# Main script for polyglot projects, to hook into cargo.
# polyglot is aliased as 'pg_' in places

current_script_path="${BASH_SOURCE[0]}"
PROJ_ROOT=$(realpath "$(dirname "$(dirname "$current_script_path")")")

source "$PROJ_ROOT/.tasks/lib-util.bash"
source "$PROJ_ROOT/.tasks/lib-install.bash"
source "$PROJ_ROOT/.tasks/lib-run.bash"

# General
VERBOSE=0
SRC_DIR="$PROJ_ROOT/src"
TEMP_DIR="$PROJ_ROOT/.temp"
LOG_DIR="$TEMP_DIR/logs"
DATA_DIR="$SRC_DIR/_data"
ASDF_PLUGIN_LIST="$PROJ_ROOT/.asdf.plugins"

# Docs
DOC_OUT="$TEMP_DIR/docs"
SPHINX_BUILDER="html"
DOC_DIR="$SRC_DIR/_docs"

# Tex
TEX_USE_BIBTEX=1
TEX_PASSES=3
TEX_OUT="$DOC_OUT/tex"
TEX_TARGET=""
TEX_TARGET_FILE=""
TEX_TARGET_DIR=""
TEX_LUA_FILE="$PROJ_ROOT/init.tex.lua"
TEX_DEFAULT="main.tex"

function pg_print_help () {
    header "Cargo Polyglot - an access point for polyglot project management."
    echo ""
    echo "cargo polyglot [-v|--verbose] [cmd] [args*] [-h | --help]"
    echo ""
    echo "SubCommands: "
    echo "- init     : initialise the polyglot project"
    echo "- export   : export additional dependencies (asdf plugins, tex packages list...)"
    echo "- release  : run release scripts to bump version num and tag commit"
    echo "- docs     : build documentation (sphinx, mdbook, rustdoc...)"
    echo "- tex      : run a tex compilation"
    echo "- keystore : setup an android keystore"
    echo "- dispy    : disassemble a python file to bytecode"

    echo ""
}

function pg_docs () {
    header "Building Docs"
    while [[ $# -gt 0 ]]; do
        case $1 in
            -a|--all)
                run_sphinx
                run_mdbook
                run_rustdoc
                ;;
            *) ;;
        esac
        shift
    done
}

function pg_tex () {
    # takes maybe 1 arg: the target tex file name
    header "Running Tex"
    # set tex global vars
    find_tex_file "$1"
    run_tex
}

function pg_tox () {
    header "TODO: Tox"
}

function pg_lint () {
    header "TODO: lint"
    # uv run ruff check --output-format concise
    # uv run mypy
    # uv run mypy --strict
}

function pg_test () {
    header "TODO: tests"
    # uv run pytest

    # uv run pytest \
    #     "--cov=$SRC_DIR" \
    #     "--cov-report=json" \
    #     "--cov-report=term" \
    #     "--cov-report=xml" \
    #     "--cov-report=html" \
    #     "--no-cov-on-fail" \
}

function pg_export () {
    header "Exporting Polyglot State"
    export_asdf
    export_tex
    echo "done."
}

function polyglot_parse_args () {
    if [[ $# -eq 0  ]]; then
        pg_print_help
        exit
    fi

    case $1 in
        -h|--help)
            pg_print_help
            exit
            ;;
        -v|--verbose)
            VERBOSE=1
            ;;
        -t|--target)
            echo "Target: $2"
            ;;
        --*=*)
            echo "Assignment: $1"
            ;;
        # cmds
        init) init_polyglot ;;
        export)
            shift
            pg_export "$@" ;;
        docs) ;;
        tex)  ;;
        dispy) ;;
        tox) ;;
        keystore)
            shift
            run_keystore "$@"
            ;;
        release)
            shift
            run_release "$@"
            ;;
        *) # Positional
            echo "Positional: $1"
            ;;
    esac
}

# get rid of the "polyglot" arg
shift
polyglot_parse_args "$@"
